% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Predictor.R
\name{Predictor}
\alias{Predictor}
\title{Predictor object}
\format{\code{\link{R6Class}} object.}
\description{
A \code{Predictor} object holds any machine learning model (mlr, caret, randomForest, ...) and the data to be used of analysing the model. 
The interpretation methods in the iml package need the machine learning model to be wrapped in a \code{Predictor} object.
}
\section{Usage}{

\preformatted{
model = Predictor$new(model = NULL, data, y = NULL, class=NULL, 
  predict.fun = NULL, type = NULL)
  
model$predict(newdata)
}
}

\section{Arguments}{

\describe{
\item{model: }{(any)\cr The machine learning model. Recommended are models from mlr and caret.
Other machine learning with a S3 predict functions work as well, but less robust (e.g. randomForest).}
\item{data: }{(data.frame)\cr The data to be used for analysing the prediction model.}
\item{y: }{((`character(1)`) | numeric | factor)\cr The target vector or (preferably) the name of the target column in the \code{data} argument.}
\item{class: }{(`character(1)`)\cr The class column to be returned in case of multiclass output.}
\item{predict.fun: }{(function)\cr The function to predict newdata. Only needed if \code{model} is not a model from mlr or caret package.}
\item{type: }{(`character(1)`)\cr This argument is passed to the prediction function of the model. The classic use case is to say type="prob" for classification models. 
For example for caret models or the most S3 predict methods. If both predict.fun and type are used, then type is passed as an argument to predict.fun.}
\item{batch.size: }{(`numeric(1)`)\cr The maximum number of rows to be input the model for prediction at once. Currently only respected for FeatureImp, Partial and Interaction.}
}
}

\section{Details}{
 
A Predictor object is a container for the prediction model and the data. 
This ensures that the machine learning model can be analysed robustly. 

Note: In case of classification, the model should return one column per class with the class probability.
}

\section{Fields}{

\describe{
\item{class: }{(`character(1)`)\cr The class column to be returned.}
\item{data: }{(data.frame)\cr data object with the data for the model interpretation.}
\item{prediction.colnames: }{(character)\cr The column names of the predictions.}
\item{task: }{(`character(1)`)\cr The inferred prediction task: "classification" or "regression".}
}
}

\section{Methods}{

\describe{
\item{predict(newdata)}{method to predict new data with the machine learning model.}
\item{\code{clone()}}{[internal] method to clone the R6 object.}
\item{\code{initialize()}}{[internal] method to initialize the R6 object.}
}
}

\examples{
if (require("mlr")) {
task = makeClassifTask(data = iris, target = "Species")
learner = makeLearner("classif.rpart", minsplit = 7, predict.type = "prob")
mod.mlr = train(learner, task)
mod = Predictor$new(mod.mlr, data = iris)
mod$predict(iris[1:5,])

mod = Predictor$new(mod.mlr, data = iris, class = "setosa")
mod$predict(iris[1:5,])
}

if (require("randomForest")) {
rf = randomForest(Species ~ ., data = iris, ntree = 20)


mod = Predictor$new(rf, data = iris, type = "prob")
mod$predict(iris[50:55,])

# Feature importance needs the target vector, which needs to be supplied: 
mod = Predictor$new(rf, data = iris, y = "Species", type = "prob")
}
}
